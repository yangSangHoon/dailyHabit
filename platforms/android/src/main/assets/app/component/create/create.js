"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model/model");
var buttonModule = require("ui/button");
var firebase = require("nativescript-plugin-firebase");
var builder = require('ui/builder');
var Create = (function () {
    function Create(page) {
        this.btnSubmit = page.getViewById('btnSubmit');
        this.btnAdd = page.getViewById('btnAdd');
        this.habitContainer = page.getViewById('habitContainer');
        this.btnLogout = page.getViewById('btnLogout');
        this.makeMyHabits();
        this.eventSetting();
    }
    Create.prototype.addHabit = function (habitDbData) {
        if (habitDbData === void 0) { habitDbData = null; }
        console.log('addHabit', JSON.stringify(habitDbData));
        var habit = builder.load({
            path: '/component/create/habit',
            name: 'habit'
        });
        if (habitDbData) {
            habit.getViewById('habitName').text = habitDbData.title;
            habit.getViewById('habitCount').text = habitDbData.value;
        }
        this.habitContainer.addChild(habit);
    };
    Create.prototype.eventSetting = function () {
        var _this = this;
        this.btnSubmit.on(buttonModule.Button.tapEvent, function () {
            _this.goSubmit();
        });
        this.btnLogout.on(buttonModule.Button.tapEvent, function () {
            _this.logout();
        });
        this.btnAdd.on(buttonModule.Button.tapEvent, function () {
            _this.addHabit();
        });
    };
    Create.prototype.makeMyHabits = function () {
        var _this = this;
        var myHabits = model_1.default.userInfo.myHabits;
        console.log('myHabits', JSON.stringify(myHabits));
        if (!myHabits || myHabits.length == 0) {
            this.addHabit();
        }
        else {
            myHabits.forEach(function (habit) {
                _this.addHabit(habit);
            });
        }
    };
    Create.prototype.goSubmit = function () {
        var habits = [];
        this.habitContainer.eachChildView(function (child) {
            habits.push({
                title: child.getViewById('habitName').text,
                value: Number(child.getViewById('habitCount').text)
            });
        });
        model_1.default.userInfo.createHabits({ habits: habits });
    };
    Create.prototype.logout = function () {
        firebase.logout();
    };
    return Create;
}());
var create = null;
exports.navigated = function (args) {
    if (!create) {
        create = new Create(args.object);
    }
    else {
        create.makeMyHabits();
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQXNDO0FBQ3RDLHdDQUEyQztBQUMzQyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUN6RCxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFdEM7SUFPSSxnQkFBWSxJQUFJO1FBQ1osSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN6QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFL0MsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRU8seUJBQVEsR0FBaEIsVUFBaUIsV0FBa0I7UUFBbEIsNEJBQUEsRUFBQSxrQkFBa0I7UUFDL0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1FBQ3JELElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDdkIsSUFBSSxFQUFFLHlCQUF5QjtZQUMvQixJQUFJLEVBQUUsT0FBTztTQUNoQixDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBQ2QsS0FBSyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQztZQUN4RCxLQUFLLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQzdELENBQUM7UUFFRCxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDO0lBRU8sNkJBQVksR0FBcEI7UUFBQSxpQkFVQztRQVRHLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQzVDLEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQzVDLEtBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNsQixDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsUUFBUSxFQUFFO1lBQ3pDLEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNwQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyw2QkFBWSxHQUFwQjtRQUFBLGlCQVVDO1FBVEcsSUFBTSxRQUFRLEdBQUcsZUFBSyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUM7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEVBQUUsQ0FBQyxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDcEIsQ0FBQztRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ0osUUFBUSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7Z0JBQ2xCLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekIsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDO0lBQ0wsQ0FBQztJQUVNLHlCQUFRLEdBQWY7UUFFSSxJQUFJLE1BQU0sR0FBa0IsRUFBRSxDQUFDO1FBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLFVBQUEsS0FBSztZQUNuQyxNQUFNLENBQUMsSUFBSSxDQUFDO2dCQUNSLEtBQUssRUFBRSxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUk7Z0JBQzFDLEtBQUssRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQUM7YUFDdEQsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxDQUFDLENBQUM7UUFFSCxlQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFDLE1BQU0sUUFBQSxFQUFDLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBRU0sdUJBQU0sR0FBYjtRQUNJLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBR0wsYUFBQztBQUFELENBQUMsQUExRUQsSUEwRUM7QUFFRCxJQUFJLE1BQU0sR0FBRyxJQUFJLENBQUM7QUFFbEIsT0FBTyxDQUFDLFNBQVMsR0FBRyxVQUFVLElBQUk7SUFDOUIsRUFBRSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQSxDQUFDO1FBQ1IsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBQUEsSUFBSSxDQUFBLENBQUM7UUFDRixNQUFNLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDMUIsQ0FBQztBQUNMLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2RlbCBmcm9tICcuLi8uLi9tb2RlbC9tb2RlbCc7XG5pbXBvcnQgYnV0dG9uTW9kdWxlID0gcmVxdWlyZShcInVpL2J1dHRvblwiKTtcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5jb25zdCBidWlsZGVyID0gcmVxdWlyZSgndWkvYnVpbGRlcicpO1xuXG5jbGFzcyBDcmVhdGUge1xuXG4gICAgcHJpdmF0ZSBidG5TdWJtaXQ7XG4gICAgcHJpdmF0ZSBidG5Mb2dvdXQ7XG4gICAgcHJpdmF0ZSBoYWJpdENvbnRhaW5lcjtcbiAgICBwcml2YXRlIGJ0bkFkZDtcblxuICAgIGNvbnN0cnVjdG9yKHBhZ2UpIHtcbiAgICAgICAgdGhpcy5idG5TdWJtaXQgPSBwYWdlLmdldFZpZXdCeUlkKCdidG5TdWJtaXQnKTtcbiAgICAgICAgdGhpcy5idG5BZGQgPSBwYWdlLmdldFZpZXdCeUlkKCdidG5BZGQnKTtcbiAgICAgICAgdGhpcy5oYWJpdENvbnRhaW5lciA9IHBhZ2UuZ2V0Vmlld0J5SWQoJ2hhYml0Q29udGFpbmVyJyk7XG4gICAgICAgIHRoaXMuYnRuTG9nb3V0ID0gcGFnZS5nZXRWaWV3QnlJZCgnYnRuTG9nb3V0Jyk7XG5cbiAgICAgICAgdGhpcy5tYWtlTXlIYWJpdHMoKTtcbiAgICAgICAgdGhpcy5ldmVudFNldHRpbmcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEhhYml0KGhhYml0RGJEYXRhID0gbnVsbCkge1xuICAgICAgICBjb25zb2xlLmxvZygnYWRkSGFiaXQnLCBKU09OLnN0cmluZ2lmeShoYWJpdERiRGF0YSkpO1xuICAgICAgICBjb25zdCBoYWJpdCA9IGJ1aWxkZXIubG9hZCh7XG4gICAgICAgICAgICBwYXRoOiAnL2NvbXBvbmVudC9jcmVhdGUvaGFiaXQnLFxuICAgICAgICAgICAgbmFtZTogJ2hhYml0J1xuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaGFiaXREYkRhdGEpIHtcbiAgICAgICAgICAgIGhhYml0LmdldFZpZXdCeUlkKCdoYWJpdE5hbWUnKS50ZXh0ID0gaGFiaXREYkRhdGEudGl0bGU7XG4gICAgICAgICAgICBoYWJpdC5nZXRWaWV3QnlJZCgnaGFiaXRDb3VudCcpLnRleHQgPSBoYWJpdERiRGF0YS52YWx1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaGFiaXRDb250YWluZXIuYWRkQ2hpbGQoaGFiaXQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZXZlbnRTZXR0aW5nKCkge1xuICAgICAgICB0aGlzLmJ0blN1Ym1pdC5vbihidXR0b25Nb2R1bGUuQnV0dG9uLnRhcEV2ZW50LCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmdvU3VibWl0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJ0bkxvZ291dC5vbihidXR0b25Nb2R1bGUuQnV0dG9uLnRhcEV2ZW50LCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvZ291dCgpO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5idG5BZGQub24oYnV0dG9uTW9kdWxlLkJ1dHRvbi50YXBFdmVudCwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5hZGRIYWJpdCgpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG1ha2VNeUhhYml0cygpIHtcbiAgICAgICAgY29uc3QgbXlIYWJpdHMgPSBtb2RlbC51c2VySW5mby5teUhhYml0cztcbiAgICAgICAgY29uc29sZS5sb2coJ215SGFiaXRzJywgSlNPTi5zdHJpbmdpZnkobXlIYWJpdHMpKTtcbiAgICAgICAgaWYgKCFteUhhYml0cyB8fCBteUhhYml0cy5sZW5ndGggPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5hZGRIYWJpdCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbXlIYWJpdHMuZm9yRWFjaChoYWJpdCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRIYWJpdChoYWJpdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnb1N1Ym1pdCgpIHtcblxuICAgICAgICBsZXQgaGFiaXRzOiBBcnJheTxPYmplY3Q+ID0gW107XG4gICAgICAgIHRoaXMuaGFiaXRDb250YWluZXIuZWFjaENoaWxkVmlldyhjaGlsZCA9PiB7XG4gICAgICAgICAgICBoYWJpdHMucHVzaCh7XG4gICAgICAgICAgICAgICAgdGl0bGU6IGNoaWxkLmdldFZpZXdCeUlkKCdoYWJpdE5hbWUnKS50ZXh0LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBOdW1iZXIoY2hpbGQuZ2V0Vmlld0J5SWQoJ2hhYml0Q291bnQnKS50ZXh0KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1vZGVsLnVzZXJJbmZvLmNyZWF0ZUhhYml0cyh7aGFiaXRzfSk7XG4gICAgfVxuXG4gICAgcHVibGljIGxvZ291dCgpIHtcbiAgICAgICAgZmlyZWJhc2UubG9nb3V0KCk7XG4gICAgfVxuXG5cbn1cblxubGV0IGNyZWF0ZSA9IG51bGw7XG5cbmV4cG9ydHMubmF2aWdhdGVkID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBpZighY3JlYXRlKXtcbiAgICAgICAgY3JlYXRlID0gbmV3IENyZWF0ZShhcmdzLm9iamVjdCk7XG4gICAgfWVsc2V7XG4gICAgICAgIGNyZWF0ZS5tYWtlTXlIYWJpdHMoKTtcbiAgICB9XG59OyJdfQ==