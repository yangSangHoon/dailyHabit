"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var model_1 = require("../../model/model");
var buttonModule = require("ui/button");
var builder = require('ui/builder');
var util_1 = require("../../util/util");
var frameModule = require("ui/frame");
var DailyCheck = (function () {
    function DailyCheck(page) {
        this.btnSubmit = page.getViewById('btnSubmit');
        this.habitContainer = page.getViewById('habitContainer');
        this.btnTomorrow = page.getViewById('btnTomorrow');
        this.btnYesterday = page.getViewById('btnYesterday');
        this.date = page.getViewById('date');
        this.btnResult = page.getViewById('btnResult');
        this.defaultSetting();
        this.eventSetting();
        this.makeMyHabits(model_1.default.userInfo.myHabits);
    }
    DailyCheck.prototype.defaultSetting = function () {
        this.todayDate = new Date();
        this.setDate(this.todayDate);
    };
    DailyCheck.prototype.setDate = function (date) {
        this.date.text = date.getFullYear() + "." + util_1.addZeroDigit(date.getMonth() + 1) + "." + date.getDate();
    };
    DailyCheck.prototype.addHabit = function (habitDbData) {
        if (habitDbData === void 0) { habitDbData = null; }
        var habit = builder.load({
            path: '/component/create/habit',
            name: 'habit'
        });
        habit.getViewById('habitName').text = habitDbData.title;
        this.habitContainer.addChild(habit);
    };
    DailyCheck.prototype.eventSetting = function () {
        var _this = this;
        this.btnSubmit.on(buttonModule.Button.tapEvent, function () {
            _this.goSubmit();
        });
        this.btnTomorrow.on(buttonModule.Button.tapEvent, function () {
            _this.goTommorrow();
        });
        this.btnYesterday.on(buttonModule.Button.tapEvent, function () {
            _this.goYesterday();
        });
        this.btnResult.on(buttonModule.Button.tapEvent, function () {
            _this.goResult();
        });
    };
    DailyCheck.prototype.goTommorrow = function () {
        this.todayDate.setDate(this.todayDate.getDate() + 1);
        this.setDate(this.todayDate);
    };
    DailyCheck.prototype.goYesterday = function () {
        this.todayDate.setDate(this.todayDate.getDate() - 1);
        this.setDate(this.todayDate);
    };
    DailyCheck.prototype.makeMyHabits = function (myHabits) {
        var _this = this;
        console.log('myHabitsmyHabits', JSON.stringify(myHabits));
        if (!myHabits || myHabits.length == 0) {
            this.addHabit();
        }
        else {
            myHabits.forEach(function (habit) {
                _this.addHabit(habit);
            });
        }
    };
    DailyCheck.prototype.goSubmit = function () {
        var habits = [];
        this.habitContainer.eachChildView(function (child) {
            habits.push({
                title: child.getViewById('habitName').text,
                value: Number(child.getViewById('habitCount').text)
            });
        });
        var date = this.date.text.split('.').join('');
        model_1.default.userInfo.setDailyHabits({ date: date, habits: habits });
    };
    DailyCheck.prototype.logout = function () {
        model_1.default.userInfo.logout();
    };
    DailyCheck.prototype.goResult = function () {
        var topmost = frameModule.topmost();
        topmost.navigate("component/result/result");
    };
    return DailyCheck;
}());
var dailyCheck = null;
exports.navigated = function (args) {
    if (!dailyCheck) {
        dailyCheck = new DailyCheck(args.object);
    }
};
//# sourceMappingURL=data:application/json;base64,