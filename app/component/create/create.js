"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var user_1 = require("../../model/user");
var buttonModule = require("ui/button");
var firebase = require("nativescript-plugin-firebase");
var builder = require('ui/builder');
var Create = (function () {
    function Create(page) {
        this.habits = [];
        this.btnSubmit = page.getViewById('btnSubmit');
        this.btnAdd = page.getViewById('btnAdd');
        this.habitContainer = page.getViewById('habitContainer');
        this.btnLogout = page.getViewById('btnLogout');
        this.eventSetting();
    }
    Create.prototype.addHabit = function (habitDbData) {
        if (habitDbData === void 0) { habitDbData = null; }
        var habit = builder.load({
            path: '/component/create/habit',
            name: 'habit'
        });
        habit.getViewById('habitName').text = habitDbData.title;
        habit.getViewById('habitCount').text = habitDbData.value;
        this.habitContainer.addChild(habit);
    };
    Create.prototype.eventSetting = function () {
        var _this = this;
        this.btnSubmit.on(buttonModule.Button.tapEvent, function () {
            _this.goSubmit();
        });
        this.btnLogout.on(buttonModule.Button.tapEvent, function () {
            _this.logout();
        });
        this.btnAdd.on(buttonModule.Button.tapEvent, function () {
            _this.addHabit();
        });
        var onChildEvent = function (result) {
            console.log("Event type: " + result.type);
            console.log("Key: " + result.key);
            console.log("Value: " + JSON.stringify(result.value));
            var users = result.value;
            //const myHabits = users.find(user => user.id == userInfo.uid);
            _this.makeMyHabits(users.habits);
        };
        // listen to changes in the /users path
        firebase.addChildEventListener(onChildEvent, "/users").then(function (listenerWrapper) {
            var path = listenerWrapper.path;
            var listeners = listenerWrapper.listeners; // an Array of listeners added
            // you can store the wrapper somewhere to later call 'removeEventListeners'
        });
    };
    Create.prototype.makeMyHabits = function (myHabits) {
        var _this = this;
        if (!myHabits || myHabits.length == 0) {
            this.addHabit();
        }
        else {
            myHabits.forEach(function (habit) {
                _this.addHabit(habit);
            });
        }
    };
    Create.prototype.goSubmit = function () {
        var habits = [];
        this.habitContainer.eachChildView(function (child) {
            habits.push({
                title: child.getViewById('habitName').text,
                value: Number(child.getViewById('habitCount').text)
            });
        });
        firebase.setValue('/users', [
            {
                id: user_1.userInfo.uid,
                habits: habits
            }
        ]);
    };
    Create.prototype.logout = function () {
        firebase.logout();
    };
    return Create;
}());
exports.navigated = function (args) {
    new Create(args.object);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY3JlYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEseUNBQTBDO0FBQzFDLHdDQUEyQztBQUUzQyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUN6RCxJQUFNLE9BQU8sR0FBRyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFFdEM7SUFRSSxnQkFBWSxJQUFJO1FBRlIsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUdoQixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDL0MsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3pELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUUvQyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDeEIsQ0FBQztJQUVPLHlCQUFRLEdBQWhCLFVBQWlCLFdBQWtCO1FBQWxCLDRCQUFBLEVBQUEsa0JBQWtCO1FBQy9CLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUM7WUFDdkIsSUFBSSxFQUFFLHlCQUF5QjtZQUMvQixJQUFJLEVBQUUsT0FBTztTQUNoQixDQUFDLENBQUM7UUFFSCxLQUFLLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDO1FBQ3hELEtBQUssQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUM7UUFDekQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7SUFD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OUIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzVCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dXNlckluZm99IGZyb20gJy4uLy4uL21vZGVsL3VzZXInO1xuaW1wb3J0IGJ1dHRvbk1vZHVsZSA9IHJlcXVpcmUoXCJ1aS9idXR0b25cIik7XG5pbXBvcnQgeyBWaWV3QmFzZSB9IGZyb20gJ3Rucy1jb3JlLW1vZHVsZXMvdWkvcGFnZS9wYWdlJztcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5jb25zdCBidWlsZGVyID0gcmVxdWlyZSgndWkvYnVpbGRlcicpO1xuXG5jbGFzcyBDcmVhdGUge1xuXG4gICAgcHJpdmF0ZSBidG5TdWJtaXQ7XG4gICAgcHJpdmF0ZSBidG5Mb2dvdXQ7XG4gICAgcHJpdmF0ZSBoYWJpdENvbnRhaW5lcjtcbiAgICBwcml2YXRlIGJ0bkFkZDtcbiAgICBwcml2YXRlIGhhYml0cyA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IocGFnZSl7XG4gICAgICAgIHRoaXMuYnRuU3VibWl0ID0gcGFnZS5nZXRWaWV3QnlJZCgnYnRuU3VibWl0Jyk7XG4gICAgICAgIHRoaXMuYnRuQWRkID0gcGFnZS5nZXRWaWV3QnlJZCgnYnRuQWRkJyk7XG4gICAgICAgIHRoaXMuaGFiaXRDb250YWluZXIgPSBwYWdlLmdldFZpZXdCeUlkKCdoYWJpdENvbnRhaW5lcicpO1xuICAgICAgICB0aGlzLmJ0bkxvZ291dCA9IHBhZ2UuZ2V0Vmlld0J5SWQoJ2J0bkxvZ291dCcpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5ldmVudFNldHRpbmcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEhhYml0KGhhYml0RGJEYXRhID0gbnVsbCkge1xuICAgICAgICBjb25zdCBoYWJpdCA9IGJ1aWxkZXIubG9hZCh7XG4gICAgICAgICAgICBwYXRoOiAnL2NvbXBvbmVudC9jcmVhdGUvaGFiaXQnLFxuICAgICAgICAgICAgbmFtZTogJ2hhYml0J1xuICAgICAgICB9KTtcblxuICAgICAgICBoYWJpdC5nZXRWaWV3QnlJZCgnaGFiaXROYW1lJykudGV4dCA9IGhhYml0RGJEYXRhLnRpdGxlO1xuICAgICAgICBoYWJpdC5nZXRWaWV3QnlJZCgnaGFiaXRDb3VudCcpLnRleHQgPSBoYWJpdERiRGF0YS52YWx1ZTtcbiAgICAgICAgdGhpcy5oYWJpdENvbnRhaW5lci5hZGRDaGlsZChoYWJpdCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBldmVudFNldHRpbmcoKSB7XG4gICAgICAgIHRoaXMuYnRuU3VibWl0Lm9uKGJ1dHRvbk1vZHVsZS5CdXR0b24udGFwRXZlbnQsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZ29TdWJtaXQoKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuYnRuTG9nb3V0Lm9uKGJ1dHRvbk1vZHVsZS5CdXR0b24udGFwRXZlbnQsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubG9nb3V0KCk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmJ0bkFkZC5vbihidXR0b25Nb2R1bGUuQnV0dG9uLnRhcEV2ZW50LCAoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmFkZEhhYml0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IG9uQ2hpbGRFdmVudCA9IChyZXN1bHQpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXZlbnQgdHlwZTogXCIgKyByZXN1bHQudHlwZSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIktleTogXCIgKyByZXN1bHQua2V5KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVmFsdWU6IFwiICsgSlNPTi5zdHJpbmdpZnkocmVzdWx0LnZhbHVlKSk7XG4gICAgICAgICAgICBjb25zdCB1c2VycyA9IHJlc3VsdC52YWx1ZTtcbiAgICAgICAgICAgIC8vY29uc3QgbXlIYWJpdHMgPSB1c2Vycy5maW5kKHVzZXIgPT4gdXNlci5pZCA9PSB1c2VySW5mby51aWQpO1xuICAgICAgICAgICAgdGhpcy5tYWtlTXlIYWJpdHModXNlcnMuaGFiaXRzKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIC8vIGxpc3RlbiB0byBjaGFuZ2VzIGluIHRoZSAvdXNlcnMgcGF0aFxuICAgICAgICBmaXJlYmFzZS5hZGRDaGlsZEV2ZW50TGlzdGVuZXIob25DaGlsZEV2ZW50LCBcIi91c2Vyc1wiKS50aGVuKFxuICAgICAgICAgICAgbGlzdGVuZXJXcmFwcGVyID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXRoID0gbGlzdGVuZXJXcmFwcGVyLnBhdGg7XG4gICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdGVuZXJXcmFwcGVyLmxpc3RlbmVyczsgLy8gYW4gQXJyYXkgb2YgbGlzdGVuZXJzIGFkZGVkXG4gICAgICAgICAgICAgICAgLy8geW91IGNhbiBzdG9yZSB0aGUgd3JhcHBlciBzb21ld2hlcmUgdG8gbGF0ZXIgY2FsbCAncmVtb3ZlRXZlbnRMaXN0ZW5lcnMnXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBtYWtlTXlIYWJpdHMobXlIYWJpdHMpIHtcbiAgICAgICAgaWYoIW15SGFiaXRzIHx8IG15SGFiaXRzLmxlbmd0aCA9PSAwKXtcbiAgICAgICAgICAgIHRoaXMuYWRkSGFiaXQoKTsgICAgXG4gICAgICAgIH1lbHNle1xuICAgICAgICAgICAgbXlIYWJpdHMuZm9yRWFjaChoYWJpdCA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRIYWJpdChoYWJpdCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnb1N1Ym1pdCgpe1xuXG4gICAgICAgIGxldCBoYWJpdHM6IEFycmF5PE9iamVjdD4gPSBbXTtcbiAgICAgICAgdGhpcy5oYWJpdENvbnRhaW5lci5lYWNoQ2hpbGRWaWV3KGNoaWxkID0+IHtcbiAgICAgICAgICAgIGhhYml0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICB0aXRsZTogY2hpbGQuZ2V0Vmlld0J5SWQoJ2hhYml0TmFtZScpLnRleHQsXG4gICAgICAgICAgICAgICAgdmFsdWU6IE51bWJlcihjaGlsZC5nZXRWaWV3QnlJZCgnaGFiaXRDb3VudCcpLnRleHQpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBmaXJlYmFzZS5zZXRWYWx1ZSggXG4gICAgICAgICAgICAnL3VzZXJzJyxcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiB1c2VySW5mby51aWQsXG4gICAgICAgICAgICAgICAgICAgIGhhYml0czogaGFiaXRzXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBsb2dvdXQoKSB7XG4gICAgICAgIGZpcmViYXNlLmxvZ291dCgpO1xuICAgIH1cblxuXG59XG5cbmV4cG9ydHMubmF2aWdhdGVkID0gZnVuY3Rpb24gKGFyZ3MpIHtcbiAgICBuZXcgQ3JlYXRlKGFyZ3Mub2JqZWN0KTtcbn07Il19