"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var user_1 = require("../../model/user");
var buttonModule = require("ui/button");
var firebase = require("nativescript-plugin-firebase");
var builder = require('ui/builder');
var DailyCheck = (function () {
    function DailyCheck(page) {
        this.habits = [];
        this.btnSubmit = page.getViewById('btnSubmit');
        this.habitContainer = page.getViewById('habitContainer');
        this.btnTomorrow = page.getViewById('btnTomorrow');
        this.btnYesterday = page.getViewById('btnYesterday');
        this.date = page.getViewById('date');
        this.defaultSetting();
        this.eventSetting();
    }
    DailyCheck.prototype.defaultSetting = function () {
        this.todayDate = new Date();
        this.setDate(this.todayDate);
    };
    DailyCheck.prototype.setDate = function (date) {
        this.date.text = date.getFullYear() + "." + (date.getMonth() + 1) + "." + date.getDate();
    };
    DailyCheck.prototype.addHabit = function (habitDbData) {
        if (habitDbData === void 0) { habitDbData = null; }
        var habit = builder.load({
            path: '/component/create/habit',
            name: 'habit'
        });
        habit.getViewById('habitName').text = habitDbData.title;
        this.habitContainer.addChild(habit);
    };
    DailyCheck.prototype.eventSetting = function () {
        var _this = this;
        this.btnSubmit.on(buttonModule.Button.tapEvent, function () {
            _this.goSubmit();
        });
        this.btnTomorrow.on(buttonModule.Button.tapEvent, function () {
            _this.goTommorrow();
        });
        this.btnYesterday.on(buttonModule.Button.tapEvent, function () {
            _this.goYesterday();
        });
        var onChildEvent = function (result) {
            console.log("Event type: " + result.type);
            console.log("Key: " + result.key);
            console.log("Value: " + JSON.stringify(result.value));
            var users = result.value;
            //const myHabits = users.find(user => user.id == userInfo.uid);
            _this.makeMyHabits(users.habits);
        };
        // listen to changes in the /users path
        firebase.addChildEventListener(onChildEvent, "/users").then(function (listenerWrapper) {
            var path = listenerWrapper.path;
            var listeners = listenerWrapper.listeners; // an Array of listeners added
            // you can store the wrapper somewhere to later call 'removeEventListeners'
        });
    };
    DailyCheck.prototype.goTommorrow = function () {
        this.todayDate.setDate(this.todayDate.getDate() + 1);
        this.setDate(this.todayDate);
    };
    DailyCheck.prototype.goYesterday = function () {
        this.todayDate.setDate(this.todayDate.getDate() - 1);
        this.setDate(this.todayDate);
    };
    DailyCheck.prototype.makeMyHabits = function (myHabits) {
        var _this = this;
        if (!myHabits || myHabits.length == 0) {
            this.addHabit();
        }
        else {
            myHabits.forEach(function (habit) {
                _this.addHabit(habit);
            });
        }
    };
    DailyCheck.prototype.goSubmit = function () {
        var habits = [];
        this.habitContainer.eachChildView(function (child) {
            habits.push({
                title: child.getViewById('habitName').text,
                value: Number(child.getViewById('habitCount').text)
            });
        });
        firebase.setValue('/dailyHabit', [
            {
                id: user_1.userInfo.uid,
                date: this.date.text,
                habits: habits
            }
        ]);
    };
    DailyCheck.prototype.logout = function () {
        firebase.logout();
    };
    return DailyCheck;
}());
exports.navigated = function (args) {
    new DailyCheck(args.object);
};
//# sourceMappingURL=data:application/json;base64,